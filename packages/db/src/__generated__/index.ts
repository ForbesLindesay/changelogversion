/**
 * !!! This file is autogenerated do not edit by hand !!!
 *
 * Generated by: @databases/pg-schema-print-types
 * Checksum: GOoviLtWkHsGPrESSfvcJ31zAuJTXg97WQd6fDDI70RJ/nJ0bZtPnIcf76Q0Kw3NFh0GgeMn3qaOtYz3gquddA==
 */

// eslint:disable
// tslint:disable

import DbChangeLogEntry, {
  ChangeLogEntries_InsertParameters,
} from './change_log_entries';
import DbChangeLogEntryKind, {
  ChangeLogEntryKinds_InsertParameters,
} from './change_log_entry_kinds';
import DbDbMigrationsApplied, {
  DbMigrationsApplied_InsertParameters,
} from './db_migrations_applied';
import DbGitBranch, {GitBranches_InsertParameters} from './git_branches';
import DbGitCommitParentCursor, {
  GitCommitParentCursors_InsertParameters,
} from './git_commit_parent_cursors';
import DbGitCommitParentSha, {
  GitCommitParentShas_InsertParameters,
} from './git_commit_parent_shas';
import DbGitCommitParent, {
  GitCommitParents_InsertParameters,
} from './git_commit_parents';
import DbGitCommitPullRequest, {
  GitCommitPullRequests_InsertParameters,
} from './git_commit_pull_requests';
import DbGitCommitStatus, {
  GitCommitStatus_InsertParameters,
} from './git_commit_status';
import DbGitCommit, {GitCommits_InsertParameters} from './git_commits';
import DbGitRepository, {
  GitRepositories_InsertParameters,
} from './git_repositories';
import DbGitRepositoryAlias, {
  GitRepositoryAliases_InsertParameters,
} from './git_repository_aliases';
import DbGitTag, {GitTags_InsertParameters} from './git_tags';
import DbPackageDependencyRecord, {
  PackageDependencyRecords_InsertParameters,
} from './package_dependency_records';
import DbPackageDependencyRecordsKind, {
  PackageDependencyRecordsKinds_InsertParameters,
} from './package_dependency_records_kinds';
import DbPackageManifestRecord, {
  PackageManifestRecords_InsertParameters,
} from './package_manifest_records';
import DbPublishTarget, {
  PublishTargets_InsertParameters,
} from './publish_targets';
import DbPullRequest, {PullRequests_InsertParameters} from './pull_requests';

interface DatabaseSchema {
  change_log_entries: {
    record: DbChangeLogEntry;
    insert: ChangeLogEntries_InsertParameters;
  };
  change_log_entry_kinds: {
    record: DbChangeLogEntryKind;
    insert: ChangeLogEntryKinds_InsertParameters;
  };
  db_migrations_applied: {
    record: DbDbMigrationsApplied;
    insert: DbMigrationsApplied_InsertParameters;
  };
  git_branches: {record: DbGitBranch; insert: GitBranches_InsertParameters};
  git_commit_parent_cursors: {
    record: DbGitCommitParentCursor;
    insert: GitCommitParentCursors_InsertParameters;
  };
  git_commit_parent_shas: {
    record: DbGitCommitParentSha;
    insert: GitCommitParentShas_InsertParameters;
  };
  git_commit_parents: {
    record: DbGitCommitParent;
    insert: GitCommitParents_InsertParameters;
  };
  git_commit_pull_requests: {
    record: DbGitCommitPullRequest;
    insert: GitCommitPullRequests_InsertParameters;
  };
  git_commit_status: {
    record: DbGitCommitStatus;
    insert: GitCommitStatus_InsertParameters;
  };
  git_commits: {record: DbGitCommit; insert: GitCommits_InsertParameters};
  git_repositories: {
    record: DbGitRepository;
    insert: GitRepositories_InsertParameters;
  };
  git_repository_aliases: {
    record: DbGitRepositoryAlias;
    insert: GitRepositoryAliases_InsertParameters;
  };
  git_tags: {record: DbGitTag; insert: GitTags_InsertParameters};
  package_dependency_records: {
    record: DbPackageDependencyRecord;
    insert: PackageDependencyRecords_InsertParameters;
  };
  package_dependency_records_kinds: {
    record: DbPackageDependencyRecordsKind;
    insert: PackageDependencyRecordsKinds_InsertParameters;
  };
  package_manifest_records: {
    record: DbPackageManifestRecord;
    insert: PackageManifestRecords_InsertParameters;
  };
  publish_targets: {
    record: DbPublishTarget;
    insert: PublishTargets_InsertParameters;
  };
  pull_requests: {record: DbPullRequest; insert: PullRequests_InsertParameters};
}
export default DatabaseSchema;

/**
 * JSON serialize values (v) if the table name (t) and column name (c)
 * is a JSON or JSONB column.
 * This is necessary if you want to store values that are not plain objects
 * in a JSON or JSONB column.
 */
function serializeValue(t: string, c: string, v: unknown): unknown {
  if (t === 'package_manifest_records' && c === 'target_config') {
    return JSON.stringify(v);
  }
  return v;
}
export {serializeValue};
