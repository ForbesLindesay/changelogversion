/**
 * !!! This file is autogenerated do not edit by hand !!!
 *
 * Generated by: @databases/pg-schema-print-types
 * Checksum: Y/ymcEsYxdTiyqX8J+6+//pUABPfzZapxpVzfKW+v/kgcDLwOHpetx9StNnEAvfhnyczAjtdt/uQlOhoCvkLDw==
 */

// eslint:disable
// tslint:disable

import type {ChangeLogEntries_InsertParameters} from './change_log_entries';
import type DbChangeLogEntry from './change_log_entries';
import type {DbMigrationsApplied_InsertParameters} from './db_migrations_applied';
import type DbDbMigrationsApplied from './db_migrations_applied';
import type {GitBranches_InsertParameters} from './git_branches';
import type DbGitBranch from './git_branches';
import type {GitCommitParents_InsertParameters} from './git_commit_parents';
import type DbGitCommitParent from './git_commit_parents';
import type {GitCommitPullRequests_InsertParameters} from './git_commit_pull_requests';
import type DbGitCommitPullRequest from './git_commit_pull_requests';
import type {GitCommits_InsertParameters} from './git_commits';
import type DbGitCommit from './git_commits';
import type {GitRepositories_InsertParameters} from './git_repositories';
import type DbGitRepository from './git_repositories';
import type {GitTags_InsertParameters} from './git_tags';
import type DbGitTag from './git_tags';
import type {PackageDependencyRecords_InsertParameters} from './package_dependency_records';
import type DbPackageDependencyRecord from './package_dependency_records';
import type {PackageDependencyRecordsKinds_InsertParameters} from './package_dependency_records_kinds';
import type DbPackageDependencyRecordsKind from './package_dependency_records_kinds';
import type {PackageManifestRecords_InsertParameters} from './package_manifest_records';
import type DbPackageManifestRecord from './package_manifest_records';
import type {PackageManifestRecordsV2_InsertParameters} from './package_manifest_records_v2';
import type DbPackageManifestRecordsV2 from './package_manifest_records_v2';
import type {PublishTargets_InsertParameters} from './publish_targets';
import type DbPublishTarget from './publish_targets';
import type {PullRequests_InsertParameters} from './pull_requests';
import type DbPullRequest from './pull_requests';

interface DatabaseSchema {
  change_log_entries: {
    record: DbChangeLogEntry;
    insert: ChangeLogEntries_InsertParameters;
  };
  db_migrations_applied: {
    record: DbDbMigrationsApplied;
    insert: DbMigrationsApplied_InsertParameters;
  };
  git_branches: {record: DbGitBranch; insert: GitBranches_InsertParameters};
  git_commit_parents: {
    record: DbGitCommitParent;
    insert: GitCommitParents_InsertParameters;
  };
  git_commit_pull_requests: {
    record: DbGitCommitPullRequest;
    insert: GitCommitPullRequests_InsertParameters;
  };
  git_commits: {record: DbGitCommit; insert: GitCommits_InsertParameters};
  git_repositories: {
    record: DbGitRepository;
    insert: GitRepositories_InsertParameters;
  };
  git_tags: {record: DbGitTag; insert: GitTags_InsertParameters};
  package_dependency_records: {
    record: DbPackageDependencyRecord;
    insert: PackageDependencyRecords_InsertParameters;
  };
  package_dependency_records_kinds: {
    record: DbPackageDependencyRecordsKind;
    insert: PackageDependencyRecordsKinds_InsertParameters;
  };
  package_manifest_records: {
    record: DbPackageManifestRecord;
    insert: PackageManifestRecords_InsertParameters;
  };
  package_manifest_records_v2: {
    record: DbPackageManifestRecordsV2;
    insert: PackageManifestRecordsV2_InsertParameters;
  };
  publish_targets: {
    record: DbPublishTarget;
    insert: PublishTargets_InsertParameters;
  };
  pull_requests: {record: DbPullRequest; insert: PullRequests_InsertParameters};
}
export default DatabaseSchema;

/**
 * JSON serialize values (v) if the table name (t) and column name (c)
 * is a JSON or JSONB column.
 * This is necessary if you want to store values that are not plain objects
 * in a JSON or JSONB column.
 */
function serializeValue(t: string, c: string, v: unknown): unknown {
  if (
    (t === 'package_manifest_records' && c === 'target_config') ||
    (t === 'package_manifest_records_v2' && c === 'manifest')
  ) {
    return JSON.stringify(v);
  }
  return v;
}
export {serializeValue};
